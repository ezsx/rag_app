"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from starlette.middleware.gzip import GZipMiddleware

from api.v1.router import router as v1_router
from core.rate_limit import RateLimitMiddleware
from core.security import sanitize_for_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
logging.getLogger("services.tools.search").setLevel(logging.DEBUG)
logging.getLogger("services.tools.rerank").setLevel(logging.DEBUG)
logging.getLogger("services.tools.fetch_docs").setLevel(logging.DEBUG)
logging.getLogger("services.agent_service").setLevel(logging.DEBUG)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ RAG API –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ LLM. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤.
        if os.getenv("LLM_WARMUP", "false").lower() == "true":
            try:
                from core.deps import get_llm

                _ = get_llm()
            except Exception as e:
                logger.error(f"LLM warmup failed: {e}")
                # –Ω–µ –ø–∞–¥–∞–µ–º: –ø—É—Å—Ç—å API –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è, –Ω–æ –ª–æ–≥ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise

    yield

    logger.info("üõë RAG API –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="RAG QA API",
    description="API –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Retrieval-Augmented Generation",
    version="1.0.0",
    lifespan=lifespan,
)

# Security middleware - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!

# 1. GZip compression
app.add_middleware(GZipMiddleware, minimum_size=1000)

# 2. Trusted Host –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Host header injection
allowed_hosts = os.getenv("ALLOWED_HOSTS", "*").split(",")
if allowed_hosts != ["*"]:
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=allowed_hosts)

# 3. Rate limiting
app.add_middleware(
    RateLimitMiddleware,
    requests_per_minute=int(os.getenv("RATE_LIMIT_PER_MINUTE", "60")),
    requests_per_hour=int(os.getenv("RATE_LIMIT_PER_HOUR", "1000")),
    burst_size=int(os.getenv("RATE_LIMIT_BURST", "10")),
    enable_exponential_backoff=True,
)

# 4. CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
cors_origins = os.getenv("CORS_ORIGINS", "*").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
    expose_headers=["X-RateLimit-Limit", "X-RateLimit-Remaining", "X-RateLimit-Reset"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API v1 —Ä–æ—É—Ç–µ—Ä
app.include_router(v1_router)


@app.get("/", tags=["root"])
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "RAG QA API v1.0.0",
        "status": "running",
        "docs": "/docs",
        "health": "/v1/health",
        "api_v1": "/v1",
        "available_endpoints": {
            "qa": "/v1/qa",
            "search": "/v1/search",
            "collections": "/v1/collections",
            "models": "/v1/models",
            "ingest": "/v1/ingest",
        },
    }


@app.get("/health", tags=["health"])
async def health_check_legacy():
    """–õ–µ–≥–∞—Å–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ v1)"""
    return {
        "status": "healthy",
        "service": "rag-qa-api",
        "version": "1.0.0",
        "note": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /v1/health",
    }


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sanitized_path = sanitize_for_logging(str(request.url.path))
    sanitized_error = sanitize_for_logging(str(exc))
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ {sanitized_path}: {sanitized_error}")

    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
    debug_mode = os.getenv("DEBUG", "false").lower() == "true"

    return JSONResponse(
        status_code=500,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "message": str(exc) if debug_mode else "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            "request_id": getattr(request.state, "request_id", None),
        },
    )


if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")

    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")

    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=os.getenv("DEBUG", "false").lower() == "true",
        log_level="info",
    )
